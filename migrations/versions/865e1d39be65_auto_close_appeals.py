"""auto_close_appeals

Revision ID: 865e1d39be65
Revises: ea08f9fa6fd7
Create Date: 2025-05-20 09:40:24.998706

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '865e1d39be65'
down_revision: Union[str, None] = 'ea08f9fa6fd7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('appeals', sa.Column('team_processing_start_time', sa.TIMESTAMP(), nullable=True))
    op.add_column('geo_settings', sa.Column('is_auto_accept_appeals_enabled', sa.Boolean(), server_default=sa.text('false'), nullable=False))
    op.add_column('geo_settings', sa.Column('auto_accept_appeals_pause_time_from', sa.Time(), nullable=True))
    op.add_column('geo_settings', sa.Column('auto_accept_appeals_pause_time_to', sa.Time(), nullable=True))
    op.add_column('geo_settings', sa.Column('auto_accept_appeals_downtime_s', sa.Integer(), nullable=True))

    op.execute("""
        CREATE OR REPLACE FUNCTION update_team_processing_start_time()
        RETURNS TRIGGER AS $$
        BEGIN
            IF (
                NEW.is_team_statement_required = TRUE OR
                (
                    NEW.close_timestamp IS NULL AND
                    NEW.is_merchant_statement_required = FALSE
                )
            ) THEN
                IF NEW.team_processing_start_time IS NULL THEN
                    NEW.team_processing_start_time := NOW();
                END IF;
            ELSE
                NEW.team_processing_start_time := NULL;
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    op.execute("""
        CREATE TRIGGER update_team_processing_start_time
        BEFORE INSERT OR UPDATE ON appeals
        FOR EACH ROW
        EXECUTE FUNCTION update_team_processing_start_time();
    """)

    op.execute("ALTER TABLE appeals ENABLE TRIGGER update_team_processing_start_time;")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('geo_settings', 'auto_accept_appeals_downtime_s')
    op.drop_column('geo_settings', 'auto_accept_appeals_pause_time_to')
    op.drop_column('geo_settings', 'auto_accept_appeals_pause_time_from')
    op.drop_column('geo_settings', 'is_auto_accept_appeals_enabled')
    op.drop_column('appeals', 'team_processing_start_time')

    op.execute("DROP TRIGGER IF EXISTS update_team_processing_start_time ON appeals;")
    op.execute("DROP FUNCTION IF EXISTS update_team_processing_start_time();")
    # ### end Alembic commands ###
