"""transaction_transfer_count

Revision ID: 9a1118597aa4
Revises: e0018a4cca7d
Create Date: 2025-05-14 06:50:48.024608

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9a1118597aa4'
down_revision: Union[str, None] = 'e0018a4cca7d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('external_transaction_model', sa.Column('transfer_count', sa.Integer(), server_default='0', nullable=False))

    op.execute("""
        CREATE OR REPLACE FUNCTION update_transfer_count_after_insert()
        RETURNS TRIGGER AS $$
        BEGIN
            UPDATE external_transaction_model
            SET transfer_count = transfer_count + 1
            WHERE id = NEW.transaction_id;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    op.execute("""
        CREATE TRIGGER update_transfer_count_after_insert
        AFTER INSERT ON transfer_association_model
        FOR EACH ROW
        EXECUTE FUNCTION update_transfer_count_after_insert();
    """)

    op.execute("ALTER TABLE transfer_association_model ENABLE TRIGGER update_transfer_count_after_insert;")

    op.execute("""
        CREATE OR REPLACE FUNCTION update_transfer_count_after_delete()
        RETURNS TRIGGER AS $$
        BEGIN
            UPDATE external_transaction_model
            SET transfer_count = transfer_count - 1
            WHERE id = OLD.transaction_id;
            RETURN OLD;
        END;
        $$ LANGUAGE plpgsql;
    """)

    op.execute("""
        CREATE TRIGGER update_transfer_count_after_delete
        AFTER DELETE ON transfer_association_model
        FOR EACH ROW
        EXECUTE FUNCTION update_transfer_count_after_delete();
    """)

    op.execute("ALTER TABLE transfer_association_model ENABLE TRIGGER update_transfer_count_after_delete;")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('external_transaction_model', 'transfer_count')

    op.execute("DROP TRIGGER IF EXISTS update_transfer_count_after_insert ON transfer_association_model;")
    op.execute("DROP FUNCTION IF EXISTS update_transfer_count_after_insert();")

    op.execute("DROP TRIGGER IF EXISTS update_transfer_count_after_delete ON transfer_association_model;")
    op.execute("DROP FUNCTION IF EXISTS update_transfer_count_after_delete();")
    # ### end Alembic commands ###
