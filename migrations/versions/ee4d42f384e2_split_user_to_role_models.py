"""split user to role models

Revision ID: ee4d42f384e2
Revises: 722a810f30c2
Create Date: 2024-10-14 19:59:16.933611

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import table, column, String, Integer, BigInteger, Boolean

# revision identifiers, used by Alembic.
revision: str = 'ee4d42f384e2'
down_revision: Union[str, None] = '722a810f30c2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    op.create_table(
        'geo',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id')
    )

    op.create_index(
        op.f('ix_geo_name'),
        'geo',
        ['name'],
        unique=True
    )

    op.create_table(
        'namespaces',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('wallet_id', sa.String(length=64), nullable=False),
        sa.Column('withdraw_wallet_id', sa.String(length=64), nullable=True),
        sa.Column('telegram_bot_secret', sa.String(length=64), nullable=True),
        sa.ForeignKeyConstraint(['wallet_id'], ['wallet_model.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['withdraw_wallet_id'], ['wallet_model.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id')
    )

    op.create_index(
        op.f('ix_namespaces_name'),
        'namespaces',
        ['name'],
        unique=True
    )

    op.create_table(
        'merchants',
        sa.Column('id', sa.String(length=64), nullable=False),
        sa.Column('transaction_auto_close_time_s', sa.BigInteger(), server_default=sa.text('15 * 60'), nullable=False),
        sa.Column('transaction_outbound_auto_close_time_s', sa.BigInteger(), server_default=sa.text('24 * 60 * 60'), nullable=False),
        sa.Column('credit_factor', sa.BigInteger(), server_default='0', nullable=False),
        sa.Column('api_secret', sa.String(length=64), nullable=False),
        sa.Column('economic_model', sa.String(length=64), server_default='crypto_fiat_profit', nullable=False),
        sa.Column('is_inbound_enabled', sa.Boolean(), server_default='FALSE', nullable=False),
        sa.Column('is_outbound_enabled', sa.Boolean(), server_default='FALSE', nullable=False),
        sa.Column('telegram_verifier_chat_id', sa.String(length=64), nullable=True),
        sa.Column('currency_id', sa.String(length=64), nullable=False),
        sa.Column('is_change_amount_allowed', sa.Boolean(), server_default='FALSE', nullable=False),
        sa.ForeignKeyConstraint(['currency_id'], ['currency_model.id'], ),
        sa.ForeignKeyConstraint(['id'], ['user_model.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('api_secret')
    )

    op.create_table(
        'supports',
        sa.Column('id', sa.String(length=64), nullable=False),
        sa.ForeignKeyConstraint(['id'], ['user_model.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table(
        'teams',
        sa.Column('id', sa.String(length=64), nullable=False),
        sa.Column('geo_id', sa.Integer(), nullable=False),
        sa.Column('credit_factor', sa.BigInteger(), server_default='0', nullable=False),
        sa.Column('api_secret', sa.String(length=64), nullable=False),
        sa.Column('economic_model', sa.String(length=64), server_default='crypto_fiat_profit', nullable=False),
        sa.Column('is_inbound_enabled', sa.Boolean(), server_default='FALSE', nullable=False),
        sa.Column('is_outbound_enabled', sa.Boolean(), server_default='FALSE', nullable=False),
        sa.Column('fiat_max_inbound', sa.BigInteger(), nullable=False),
        sa.Column('fiat_min_inbound', sa.BigInteger(), nullable=False),
        sa.Column('priority_inbound', sa.Integer(), server_default='100', nullable=False),
        sa.ForeignKeyConstraint(['geo_id'], ['geo.id'], ),
        sa.ForeignKeyConstraint(['id'], ['user_model.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('api_secret')
    )

    users_table = table(
        'user_model',
        column('id', String),
        column('role', String),
        column('namespace', String),
        column('transaction_auto_close_time_s', BigInteger),
        column('transaction_outbound_auto_close_time_s', BigInteger),
        column('currency_id', String),
        column('telegram_verifier_chat_id', String),
        column('namespace_id', Integer),
        column('credit_factor', BigInteger),
        column('economic_model', String),
        column('api_secret', String),
        column('is_inbound_enabled', Boolean),
        column('is_outbound_enabled', Boolean),
        column('wallet_id', String),
        column('withdraw_wallet_id', String),
        column('telegram_bot_secret', String),
        column('fiat_max_inbound', BigInteger),
        column('fiat_min_inbound', BigInteger),
        column('priority_inbound', Integer),
        column('is_change_amount_allowed', Boolean)
    )

    merchants_table = table(
        'merchants',
        column('id', String),
        column('transaction_auto_close_time_s', BigInteger),
        column('transaction_outbound_auto_close_time_s', BigInteger),
        column('currency_id', String),
        column('telegram_verifier_chat_id', String),
        column('credit_factor', BigInteger),
        column('economic_model', String),
        column('api_secret', String),
        column('is_inbound_enabled', Boolean),
        column('is_outbound_enabled', Boolean),
        column('is_change_amount_allowed', Boolean),
    )

    supports_table = table(
        'supports',
        column('id', String)
    )

    teams_table = table(
        'teams',
        column('id', Integer),
        column('geo_id', Integer),
        column('credit_factor', BigInteger),
        column('economic_model', String),
        column('api_secret', String),
        column('is_inbound_enabled', Boolean),
        column('is_outbound_enabled', Boolean),
        column('fiat_max_inbound', BigInteger),
        column('fiat_min_inbound', BigInteger),
        column('priority_inbound', Integer)
    )

    namespaces_table = table(
        'namespaces',
        column('id', Integer),
        column('name', String),
        column('wallet_id', String),
        column('withdraw_wallet_id', String),
        column('telegram_bot_secret', String)
    )

    geo_table = table(
        'geo',
        column('id', Integer),
        column('name', String),
    )

    geo_id = conn.execute(
        geo_table
        .insert()
        .values(name="ru")
        .returning(geo_table.c.id)
    ).scalar()

    conn.execute(
        merchants_table
        .insert()
        .from_select(
            [
                'id',
                'transaction_auto_close_time_s',
                'transaction_outbound_auto_close_time_s',
                'currency_id',
                'telegram_verifier_chat_id',
                'credit_factor',
                'economic_model',
                'api_secret',
                'is_inbound_enabled',
                'is_outbound_enabled',
                'is_change_amount_allowed'
            ],
            sa.select(
                users_table.c.id,
                users_table.c.transaction_auto_close_time_s,
                users_table.c.transaction_outbound_auto_close_time_s,
                users_table.c.currency_id,
                users_table.c.telegram_verifier_chat_id,
                users_table.c.credit_factor,
                sa.func.coalesce(users_table.c.economic_model, 'crypto_fiat_profit'),
                users_table.c.api_secret,
                sa.func.coalesce(users_table.c.is_inbound_enabled, False),
                sa.func.coalesce(users_table.c.is_outbound_enabled, False),
                sa.func.coalesce(users_table.c.is_change_amount_allowed, False),
            )
            .where(users_table.c.role == 'merchant')
        )
    )

    conn.execute(
        supports_table
        .insert()
        .from_select(
            ['id'],
            sa.select(users_table.c.id)
            .where(users_table.c.role == 'support')
        )
    )

    conn.execute(
        teams_table
        .insert()
        .from_select(
            [
                'id',
                'geo_id',
                'credit_factor',
                'economic_model',
                'api_secret',
                'is_inbound_enabled',
                'is_outbound_enabled',
                'fiat_max_inbound',
                'fiat_min_inbound',
                'priority_inbound'
            ],
            sa.select(
                users_table.c.id,
                sa.literal(geo_id),
                users_table.c.credit_factor,
                sa.func.coalesce(users_table.c.economic_model, 'crypto_fiat_profit'),
                users_table.c.api_secret,
                sa.func.coalesce(users_table.c.is_inbound_enabled, False),
                sa.func.coalesce(users_table.c.is_outbound_enabled, False),
                sa.func.coalesce(users_table.c.fiat_max_inbound, (2 ** 32) - 1),
                sa.func.coalesce(users_table.c.fiat_min_inbound, 0),
                sa.func.coalesce(users_table.c.priority_inbound, 100)
            )
            .where(users_table.c.role == 'team')
        )
    )

    op.drop_index('bank_detail_model_offset_id_index', table_name='bank_detail_model')
    op.create_index('bank_detail_model_offset_id_index', 'bank_detail_model', ['offset_id'], unique=False)
    op.add_column('user_model', sa.Column('namespace_id', sa.Integer(), nullable=True))

    subquery = (
        sa.select(
            users_table.c.namespace,
            sa.func.first_value(users_table.c.wallet_id)
            .over(
                partition_by=users_table.c.namespace,
                order_by=sa.case(
                    (users_table.c.wallet_id.isnot(None), 1),
                    else_=2
                )
            ).label('wallet_id'),
            sa.func.first_value(users_table.c.withdraw_wallet_id)
            .over(
                partition_by=users_table.c.namespace,
                order_by=sa.case(
                    (users_table.c.withdraw_wallet_id.isnot(None), 1),
                    else_=2
                )
            ).label('withdraw_wallet_id'),
            sa.func.first_value(users_table.c.telegram_bot_secret)
            .over(
                partition_by=users_table.c.namespace,
                order_by=sa.case(
                    (users_table.c.telegram_bot_secret.isnot(None), 1),
                    else_=2
                )
            ).label('telegram_bot_secret')
        ).where(
            sa.or_(
                users_table.c.wallet_id.isnot(None),
                users_table.c.withdraw_wallet_id.isnot(None),
                users_table.c.telegram_bot_secret.isnot(None)
            )
        ).distinct(users_table.c.namespace).alias('subquery')
    )

    unique_namespaces = conn.execute(
        sa.select(
            subquery.c.namespace,
            subquery.c.wallet_id,
            subquery.c.withdraw_wallet_id,
            subquery.c.telegram_bot_secret
        )
    ).fetchall()

    namespaces_id_map = {}

    for namespace in unique_namespaces:
        if namespace[0] is not None:
            result = conn.execute(
                namespaces_table
                .insert()
                .values(
                    name=namespace[0],
                    wallet_id=namespace[1],
                    withdraw_wallet_id=namespace[2],
                    telegram_bot_secret=namespace[3]
                )
                .returning(namespaces_table.c.id)
            )
            namespaces_id_map[namespace[0]] = result.scalar()

    for ns_name, ns_id in namespaces_id_map.items():
        conn.execute(
            users_table.update()
            .where(users_table.c.namespace == ns_name)
            .values(namespace_id=ns_id)
        )

    op.drop_index('ix_user_model_namespace', table_name='user_model')
    op.drop_constraint('user_model_api_secret_key', 'user_model', type_='unique')
    op.drop_constraint('user_model_wallet_id_fkey', 'user_model', type_='foreignkey')
    op.drop_constraint('user_model_withdraw_wallet_id_fkey', 'user_model', type_='foreignkey')
    op.drop_constraint('user_model_currency_id_fkey', 'user_model', type_='foreignkey')
    op.create_foreign_key(None, 'user_model', 'namespaces', ['namespace_id'], ['id'])
    op.drop_column('user_model', 'currency_id')
    op.drop_column('user_model', 'priority_inbound')
    op.drop_column('user_model', 'is_enabled')
    op.drop_column('user_model', 'fiat_min_inbound')
    op.drop_column('user_model', 'transaction_outbound_auto_close_time_s')
    op.drop_column('user_model', 'namespace')
    op.drop_column('user_model', 'transaction_auto_close_time_s')
    op.drop_column('user_model', 'fiat_max_inbound')
    op.drop_column('user_model', 'credit_factor')
    op.drop_column('user_model', 'economic_model')
    op.drop_column('user_model', 'api_secret')
    op.drop_column('user_model', 'trust_balance')
    op.drop_column('user_model', 'telegram_appeal_chat_id')
    op.drop_column('user_model', 'wallet_id')
    op.drop_column('user_model', 'telegram_bot_secret')
    op.drop_column('user_model', 'is_outbound_enabled')
    op.drop_column('user_model', 'profit_balance')
    op.drop_column('user_model', 'is_change_amount_allowed')
    op.drop_column('user_model', 'locked_balance')
    op.drop_column('user_model', 'is_inbound_enabled')
    op.drop_column('user_model', 'telegram_verifier_chat_id')
    op.drop_column('user_model', 'withdraw_wallet_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_model',
                  sa.Column('withdraw_wallet_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('user_model',
                  sa.Column('telegram_verifier_chat_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('user_model', sa.Column('is_inbound_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_model', sa.Column('locked_balance', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('user_model', sa.Column('is_change_amount_allowed', sa.BOOLEAN(), server_default=sa.text('false'),
                                          autoincrement=False, nullable=False))
    op.add_column('user_model', sa.Column('profit_balance', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('user_model', sa.Column('is_outbound_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_model',
                  sa.Column('telegram_bot_secret', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('user_model', sa.Column('wallet_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('user_model',
                  sa.Column('telegram_appeal_chat_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('user_model', sa.Column('trust_balance', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('user_model', sa.Column('api_secret', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('user_model', sa.Column('economic_model', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('user_model', sa.Column('credit_factor', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('user_model', sa.Column('fiat_max_inbound', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('user_model',
                  sa.Column('transaction_auto_close_time_s', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('user_model', sa.Column('namespace', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user_model',
                  sa.Column('transaction_outbound_auto_close_time_s', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('user_model', sa.Column('fiat_min_inbound', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('user_model', sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('user_model', sa.Column('priority_inbound', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('user_model', sa.Column('currency_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_model', type_='foreignkey')
    op.create_foreign_key('user_model_currency_id_fkey', 'user_model', 'currency_model', ['currency_id'], ['id'])
    op.create_foreign_key('user_model_withdraw_wallet_id_fkey', 'user_model', 'wallet_model', ['withdraw_wallet_id'],
                          ['id'])
    op.create_foreign_key('user_model_wallet_id_fkey', 'user_model', 'wallet_model', ['wallet_id'], ['id'])
    op.create_unique_constraint('user_model_api_secret_key', 'user_model', ['api_secret'])
    op.create_index('ix_user_model_namespace', 'user_model', ['namespace'], unique=False)
    op.drop_column('user_model', 'namespace_id')
    op.drop_index('bank_detail_model_offset_id_index', table_name='bank_detail_model')
    op.create_index('bank_detail_model_offset_id_index', 'bank_detail_model', ['number', 'bank', 'type', 'is_deleted'],
                    unique=False)
    op.drop_table('teams')
    op.drop_table('supports')
    op.drop_table('merchants')
    op.drop_index(op.f('ix_namespaces_name'), table_name='namespaces')
    op.drop_table('namespaces')
    op.drop_index(op.f('ix_geo_name'), table_name='geo')
    op.drop_table('geo')
    # ### end Alembic commands ###
